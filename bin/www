#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('express-socketio-redis-sample:server');
const http = require('http');
const { Server } = require('socket.io');
const { createAdapter } = require('@socket.io/redis-adapter');
const { createClient } = require('redis');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const pubClient = createClient({ url: 'redis://kvs:6379' });
const subClient = pubClient.duplicate();
Promise.all([pubClient.connect(), subClient.connect()]);
const io = new Server(server, {
  adapter: createAdapter(pubClient, subClient),
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', (socket) => {
  const { roomId, userName } = socket.handshake.query;
  console.log(`Socket is connected`, socket.handshake.query);
  socket.data.userName = userName;
  socket.join(roomId);
  socket.on('disconnect', () => {
    console.log('Socket is disconnected');
  });
  socket.on('message', ({ message }) => {
    console.log(`Receive ${userName}'s message "${message}"`);
    io.to(roomId).emit('message', { id: socket.id, userName, message });
  });
});
io.of('/').adapter.on('create-room', (room) => {
  console.log(`Room ${room} was created`);
  io.emit('create-room', { room });
});
io.of('/').adapter.on('join-room', async (room, id) => {
  console.log(`Socket ${id} has joined room ${room}`);
  const sockets = await io.fetchSockets();
  const users = sockets.reduce((categorized, socket) => {
    const user = {
      id: socket.id,
      name: socket.data.userName,
      rooms: socket.rooms,
    };
    const category = Array.from(socket.rooms).includes(room) ? 'inside' : 'outside';
    categorized[category].push(user)
    return categorized;
  }, { inside: [], outside: [] });
  const rooms = Array.from(io.of('/').adapter.rooms)
    .filter(([room]) => !users.outside.some((user) => user.id === room))
    .map(([room]) => room);
  io.to(room).emit('join-room', { room, id, users: users.inside, rooms });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
